// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoomType {
  suit
  normal
}

enum RoleType {
  admin
  laundry
  reception
  cafe
}

enum TypePayment {
  cash
  credit_cart
  qr
  back
}

enum TypeCharge {
  lodging
  laundry
  cafeteria
  other
}

model Country {
  id    String  @id
  name  String
  Guest Guest[]
}

model Room {
  id          String   @id @default(uuid())
  roomType    RoomType
  roomNumber  Int
  betsNumber  Int
  isAvailable Boolean? @default(false)

  // * relations
  // ? one to one
  register Register?
}

model User {
  id       String   @id @default(uuid())
  role     RoleType
  birdDate DateTime
  name     String
  phone    String
  username String   @unique
  password String
  isActive Boolean  @default(false)

  // * relations
  // ? one to many
  Register Register[]
}

model Register {
  id           String    @id @default(uuid())
  checkIn      DateTime  @default(now())
  checkOut     DateTime?
  guestsNumber Int

  // ? discount and price will be manage on cents
  discount Int @default(0)
  price    Int

  // * relations
  // ? many to one
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // ? one to one
  room   Room   @relation(fields: [roomId], references: [id])
  roomId String @unique

  Guest   Guest[]
  Payment Payment[]
  Charge  Charge[]
}

model Guest {
  id          String    @id @default(uuid())
  di          String    @unique
  checkIn     DateTime  @default(now())
  checkOut    DateTime?
  dateOfBirth DateTime
  city        String
  name        String
  lastName    String
  phone       String
  roomNumber  Int

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  register   Register @relation(fields: [registerId], references: [id])
  registerId String
}

model Payment {
  id          String      @id @default(uuid())
  paidAt      DateTime    @default(now())
  amount      Int
  description String      @default("")
  type        TypePayment

  register   Register @relation(fields: [registerId], references: [id])
  registerId String
}

model Charge {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updateAt    DateTime?  @updatedAt
  amount      Int
  description String     @default("")
  type        TypeCharge @default(dbgenerated("other"))

  register   Register @relation(fields: [registerId], references: [id])
  registerId String
}

// todo add cafeteria model
